package com.hxhy.controller.manager.confine;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hxhy.conf.MySiteSetting;
import com.hxhy.exception.BusinessException;
import com.hxhy.model.common.BaseResponse;
import com.hxhy.model.dto.ManagerInfo;
import com.hxhy.model.po.HxhyManager;
import com.hxhy.service.HxhyManagerService;
import com.hxhy.service.HxhyRoleService;
import com.hxhy.util.MD5Util;
import com.hxhy.util.RedisUtil;
import com.hxhy.util.RegexUtil;
import com.hxhy.util.StringUtil;

@Controller
@ResponseBody
@RequestMapping("/manager/confine/user")
public class HxhyManagerController {

	@Autowired
	private HxhyRoleService hxhyRoleService;
	@Autowired
	private HxhyManagerService hxhyManagerService;
	@Autowired
	public MySiteSetting mySiteSetting;
	@Autowired
	private RedisUtil redisUtil; 
	
	/**
	 * 查找所有的管理员
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/info", method = RequestMethod.POST, produces = "application/json;charset=utf-8")
	public BaseResponse listInfo(@RequestBody Map<String, String> map) {
		BaseResponse baseResponse = new BaseResponse();

		List<ManagerInfo> list = hxhyManagerService.listInfo();
		if(list != null && !list.isEmpty()) {
			return baseResponse.setSuccess("操作成功！", list);
		} else {
			return baseResponse.setError(204, "没有数据");
		}
	}
	
	/**
	 * 获得所有非超级管理员的id 和 name
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/employee", method = RequestMethod.POST, produces = "application/json;charset=utf-8")
	public BaseResponse listEmployee() {
		BaseResponse baseResponse = new BaseResponse();

		List<HxhyManager> list = hxhyManagerService.listEmployee();
		if(list != null && !list.isEmpty()) {
			return baseResponse.setSuccess("操作成功！", list);
		} else {
			return baseResponse.setError(204, "没有数据");
		}
	}

	/**
	 * 添加管理员
	 * 
	 * @param
	 * @return
	 * @throws BusinessException
	 */
	@RequestMapping(value = "/insert", method = RequestMethod.POST, produces ="application/json;charset=utf-8")
	public BaseResponse save(@RequestBody HxhyManager hxhyManager) throws BusinessException {
		BaseResponse baseResponse = new BaseResponse();
		return null;
	}
	 

	/**
	 * 删除单个管理员
	 * 
	 * @param map
	 * @return
	 * @throws BusinessException
	 */
	@RequestMapping(value = "/delect", method = RequestMethod.POST, produces = "application/json;charset=utf-8")
	public BaseResponse delect(@RequestBody Map<String, String> map) throws BusinessException {
		BaseResponse baseResponse = new BaseResponse();
		if (map.get("id") != null) {
			hxhyManagerService.deleteById(StringUtil.strToLong(map.get("id")));
			return baseResponse.setSuccess("删除管理员成功！");
		} else {
			return baseResponse.setError(404, "操作对象不明确！");
		}
	}

	/**
	 * 批量删除管理员
	 * 
	 * @param map
	 * @return
	 * @throws BusinessException
	 */
	@RequestMapping(value = "/delects", method = RequestMethod.POST, produces = "application/json;charset=utf-8")
	public BaseResponse delects(@RequestBody Map<String, String> map) throws BusinessException {
		BaseResponse baseResponse = new BaseResponse();
		if (map.get("ids") != null && RegexUtil.matches(RegexUtil.IDS_REGEX, map.get("ids"))) {
			hxhyManagerService.deleteByIds(map.get("ids"));
			return baseResponse.setSuccess("删除管理员成功！");
		} else {
			return baseResponse.setError(404, "操作对象不明确！");
		}
	}

	/**
	 * 修改管理员
	 * @param hxhyManager
	 * @return
	 * @throws BusinessException
	 */
	@RequestMapping(value = "/update", method = RequestMethod.POST, produces = "application/json;charset=utf-8")
	public BaseResponse update(HttpServletRequest request, @RequestBody HxhyManager hxhyManager) throws BusinessException {
		BaseResponse baseResponse = new BaseResponse();
		HxhyManager hxhyManager2 = new HxhyManager();
		HxhyManager hxhyManager3 = (HxhyManager) redisUtil.get(mySiteSetting.getSessionName()+request.getSession().getId());
		if (hxhyManager3.getIs_alter() != 1) {
			if (hxhyManager.getId() != null) {
				if (hxhyManager.getAccount() != null || RegexUtil.matches(RegexUtil.ACCOUNT_REGEX, hxhyManager.getAccount())
						|| hxhyManager.getAccount().length() > 4) {
					hxhyManager2.setAccount(hxhyManager.getAccount());
				}
				if (hxhyManager.getPasswd() == null || !RegexUtil.matches(RegexUtil.PASSWORD_REGEX, hxhyManager.getPasswd())) {
					String pw = MD5Util.MD5(hxhyManager.getPasswd());
					hxhyManager2.setPasswd(pw);
				}
				if (hxhyManager.getRole_id() == null) {
					hxhyManager2.setRole_id(hxhyManager.getRole_id());
				}
				if (hxhyManager.getIs_work() == null) {
					hxhyManager2.setIs_work(hxhyManager.getIs_work());
				}
				
				hxhyManagerService.update(hxhyManager2);
				return baseResponse.setSuccess("修改成功！");
			} else {
				return baseResponse.setError(403, "操作对象不明确！");
			}
		} else {
			return baseResponse.setError(403, "你已经修改过了！");
		}

	}

}
