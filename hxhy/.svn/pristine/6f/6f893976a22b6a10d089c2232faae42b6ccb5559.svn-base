package com.hxhy.service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.hxhy.mapper.HxhyAttendanceStatisticsMapper;
import com.hxhy.model.dto.AttendanceStatistics;
import com.hxhy.model.dto.StatisticsAmount;
import com.hxhy.model.po.HxhyAttendance;
import com.hxhy.model.po.HxhyAttendanceStatistics;
import com.hxhy.model.po.HxhyDelayWorkScheme;
import com.hxhy.model.po.HxhyLeaveRecord;
import com.hxhy.model.po.HxhyManager;
import com.hxhy.service.common.BaseService;
import com.hxhy.util.DateUtil;

@Service
public class HxhyAttendanceStatisticsService extends BaseService<HxhyAttendanceStatistics, HxhyAttendanceStatisticsMapper> {

	private Logger logger = LoggerFactory.getLogger(HxhyAttendanceStatisticsService.class);
	
	@Autowired
	private HxhyAttendanceService hxhyAttendanceService;
	@Autowired
	private HxhyLeaveRecordService hxhyLeaveRecordService;
	@Autowired
	private HxhyHolidayService hxhyHolidayService;
	@Autowired
	private HxhyWorkSchemeService hxhyWorkSchemeService;
	@Autowired
	private HxhyManagerService hxhyManagerService;
	@Autowired
	private HxhyDelayWorkSchemeService hxhyDelayWorkSchemeService;
	
	@Override
	protected String getTableName() {
		return null;
	}
	
	/**
	 * 获得用户考勤统计信息
	 * 
	 * @param page
	 * @param size
	 * @param userId
	 * @param monthy
	 * @return
	 */
	public PageInfo<AttendanceStatistics> statistics(Integer page, Integer size, String monthy, String userId) {
		if(page != null && size != null) {
			PageHelper.startPage(page, size);
		} else {
			PageHelper.startPage(1, 40);
		}
		
		List<AttendanceStatistics> list = mapper.statistics(userId, monthy);
		PageInfo<AttendanceStatistics> pageInfo = new PageInfo<AttendanceStatistics>(list);
		return pageInfo;
	}
	
	/**
	 * 考勤统计，没人每月一条，可以统计多次，以最后统计为准
	 * 
	 * @param monthy  YYYYMM
	 * @return
	 */
	public String attendanceStatistics(String monthy) {
		
		try {
			//获得考勤统计信息，如果存在则覆盖，不存在则不处理
			HxhyAttendanceStatistics hxhyAttendanceStatistics = new HxhyAttendanceStatistics();
			hxhyAttendanceStatistics.setMonthy(monthy);
			List<HxhyAttendanceStatistics> statistiscList = this.getAll(hxhyAttendanceStatistics, null);
			
			//获得用户考勤信息
			HxhyAttendance hxhyAttendance = new HxhyAttendance();
			hxhyAttendance.setMonthy(monthy);
			List<HxhyAttendance> attendanceList = hxhyAttendanceService.getAll(hxhyAttendance, "user_id ASC, work_date ASC, check_type DESC");
			
			//开始核对统计，新增加入列表，修改直接更新，因为没有批量更新的操作
			List<HxhyAttendanceStatistics> saveStatisticsList = new ArrayList<HxhyAttendanceStatistics>();
			if(attendanceList.size() > 0) {
				
				//逻辑涉及的基础参数
				String userId = null, verDate = null;
				Double deductMoney = 0.0, leaveMoney = 0.0, workMoney = 0.0, basicsMony = 0.0;
				boolean isEnd = false, isSys = false, isStart = false, isAdd = true;
				int earlyDate=0, earlyTime=0, notSigned=0, leaveTime=0, leaveDate=0, lateDate=0, lateTime=0,
						workDate=0, theoryDate=0, allWorkDate=0, type=0, isPerfect=1, holiday = 0, workday = 0,
						amount=0, delayTime=0;
				HxhyAttendanceStatistics hxhyAttendanceStatistics2 = new HxhyAttendanceStatistics();
				List<HxhyLeaveRecord> leaveList = new ArrayList<HxhyLeaveRecord>();
				
				//获得当月节假日信息
				List<StatisticsAmount> list = hxhyHolidayService.getStatisics(monthy);
				if(list != null && !list.isEmpty()) {
					for(StatisticsAmount statisticsAmount : list) {
						if(statisticsAmount.getState() == 1) {
							holiday++;
						}
						if(statisticsAmount.getState() == 2) {
							workday++;
						}
					}
				}
				
				//获得延迟上班方案信息
				List<HxhyDelayWorkScheme> delayList = hxhyDelayWorkSchemeService.getAll(null, "type ASC, work_date ASC");
				
				//获得所有的用户信息
				List<HxhyManager> userList = hxhyManagerService.getAll(null, null);
				
				for(HxhyAttendance hxhyAttendance2 : attendanceList) {
					
					//获得用户的基础信息
					if(userId == null) {
						userId = hxhyAttendance2.getUser_id();
						hxhyAttendanceStatistics2.setUser_id(userId);
						verDate = hxhyAttendance2.getWork_date();
						leaveList = hxhyLeaveRecordService.getByUserId(userId, monthy);
						type = hxhyWorkSchemeService.getTypeByUserId(userId);
						theoryDate = getTheoryDate(type, monthy);
						allWorkDate = theoryDate + workday - holiday;
						for(HxhyManager hxhyManager2 : userList) {
							if(hxhyManager2.getUser_id().equals(userId)) {
								basicsMony = (hxhyManager2.getBasics_money() + hxhyManager2.getMoney()) / theoryDate;
								basicsMony = new BigDecimal(basicsMony).setScale(4, RoundingMode.HALF_UP).doubleValue();
							}
						}
					}
					//判断是不是同一个人
					//时间结果（Normal:正常;Early:早退; Late:迟到;SeriousLate:严重迟到；Absenteeism:旷工迟到； NotSigned:未打卡,leave：请假）
					if(userId.equals(hxhyAttendance2.getUser_id())) {
						//统计处理
						//判断是否是同一天
						if(!verDate.equals(hxhyAttendance2.getWork_date())) {
							//不是同一天
							//判断上一天的处理是否未结束
							if(!isEnd) {
								//未结束
								//判断是否是下班卡
								if("OffDuty".equals(hxhyAttendance2.getCheck_type())) {
									//下班卡
									//判断是否是系统打卡
									if("SYSTEM".equals(hxhyAttendance2.getSource_type())) {
										//判断同一天是否有上班操作
										if(isStart) {
											//是否是系统打卡
											//判断是否是系统打卡，非系统打卡进行下面操作
											if(!isSys) {
												notSigned++;
												isPerfect = 0;
												amount++;
											}
										}
									} else {
										//判断同一天是否有上班操作
										if(!isStart) {
											//没有上班打卡则加一次缺卡记录
											notSigned++;
											isPerfect = 0;
											amount++;
										} else {
											//判断是否是系统打卡,当时系统打卡的时候进行下方操作
											if(isSys) {
												notSigned++;
												isPerfect = 0;
												amount++;
											}
										}
										
										//继续后续操作
										if("Early".equals(hxhyAttendance2.getTime_result())) {
											
											if(hxhyAttendance2.getTimelong() <= 3) {
												//
											} else {
												amount++;
												isPerfect = 0;
												if(amount > 5) {
													if(hxhyAttendance2.getTimelong() <= 60) {
														earlyDate++;
													} else if(hxhyAttendance2.getTimelong() > 60) {
														earlyDate++;
														deductMoney = deductMoney + ((hxhyAttendance2.getTimelong() / 60) / 9 ) * basicsMony;
													}
												} else {
													earlyDate++;
													deductMoney = deductMoney + calculateMoney(hxhyAttendance2.getTimelong(), basicsMony);
												}
											}
										} else if("NotSigned".equals(hxhyAttendance2.getTime_result())) {
											
											notSigned++;
										} else if("Normal".equals(hxhyAttendance2.getTime_result())) {
											
											if(delayList != null && !delayList.isEmpty()) {
												for(HxhyDelayWorkScheme hxhyDelayWorkScheme : delayList) {
													if(hxhyDelayWorkScheme.getType() == 2) {
														Long destination = DateUtil.parseDate(hxhyDelayWorkScheme.getWork_date(), "HH:mm").getTime();
														Long objective = DateUtil.parseDate(DateUtil.format(hxhyAttendance2.getUser_check_time(), "HH:mm"), "HH:mm").getTime();
														if(destination >= objective) {
															delayTime = hxhyDelayWorkScheme.getDelay_time();
															break;
														} else {
															delayTime = 0;
														}
													}
												}
											}
										}
										
										//工作日加一天，并重置参数
										if(isAdd) {
											workDate++;
											isAdd = false;
										}
									}
								} else {
									//未打卡及新的一天的情况
									//判断上一天是否有上班操作
									if(isStart) {
										//判断是否是系统打卡，下面的操作是非系统打卡
										if(!isSys) {
											//判断是否已经计算过上班天数
											if(isAdd) {
												notSigned++;
												workDate++;
												isPerfect = 0;
												amount++;
											}
										}
									}
								}
							}
							
							isEnd = false; isSys = false; isStart = false; isAdd = true;
						}
						
						//请假校验
						boolean isNotLeave = true;
						if(leaveList != null && !leaveList.isEmpty()) {
							long workDateLong = DateUtil.parseDate(verDate, DateUtil.FORMAT_YYYY_MM_dd).getTime();
							for(HxhyLeaveRecord hxhyLeaveRecord : leaveList) {
								if(hxhyLeaveRecord.getStart_date().getTime() <= workDateLong
										&& hxhyLeaveRecord.getEnd_date().getTime() > workDateLong) {
									
									isNotLeave = false;
									leaveTime = leaveTime + hxhyLeaveRecord.getLongtime();
									leaveDate++;
								}
							}
						}
						
						//是否补卡操作
						if(hxhyAttendance2.getIs_supplement() == 1) {
							isPerfect = 0;
						}
						
						//判断当天是否有请假
						if(isNotLeave) {
							//判断是上班还是下班
							if("OnDuty".equals(hxhyAttendance2.getCheck_type())) {
								
								//日期重置
								verDate = hxhyAttendance2.getWork_date();
								//修改状态
								isStart = true;
								//判断是否是系统打卡
								if("SYSTEM".equals(hxhyAttendance2.getSource_type())) {
									isSys = true;
								} else {
									if("Late".equals(hxhyAttendance2.getTime_result()) || "SeriousLate".equals(hxhyAttendance2.getTime_result())
											|| "Absenteeism".equals(hxhyAttendance2.getTime_result())) {
										
										int longTime = hxhyAttendance2.getTimelong() - delayTime;
										if(longTime <= 3) {
											//
										} else {
											amount++;
											isPerfect = 0;
											if(amount > 5) {
												if(longTime <= 60) {
													lateDate++;
												} else if(longTime > 60) {
													lateDate++;
													deductMoney = deductMoney + ((longTime / 60) / 9 ) * basicsMony;
												}
											} else {
												lateDate++;
												deductMoney = deductMoney + calculateMoney(longTime, basicsMony);
											}
										}
									}
								}
							} else if("OffDuty".equals(hxhyAttendance2.getCheck_type())) {
								
								//判断是否是系统打卡
								if("SYSTEM".equals(hxhyAttendance2.getSource_type())) {
									//判断同一天是否有上班操作
									if(isStart) {
										//是否是系统打卡
										//判断是否是系统打卡，非系统打卡进行下面操作
										if(!isSys) {
											notSigned++;
											isPerfect = 0;
											amount++;
										}
									}
								} else {
									//判断同一天是否有上班操作
									if(!isStart) {
										//没有上班打卡则加一次缺卡记录
										notSigned++;
										isPerfect = 0;
										amount++;
									} else {
										//判断是否是系统打卡,当时系统打卡的时候进行下方操作
										if(isSys) {
											notSigned++;
											isPerfect = 0;
											amount++;
										}
									}
									
									//继续后续操作
									if("Early".equals(hxhyAttendance2.getTime_result())) {
										
										if(hxhyAttendance2.getTimelong() <= 3) {
											//
										} else {
											amount++;
											isPerfect = 0;
											if(amount > 5) {
												if(hxhyAttendance2.getTimelong() <= 60) {
													earlyDate++;
												} else if(hxhyAttendance2.getTimelong() > 60) {
													earlyDate++;
													deductMoney = deductMoney + ((hxhyAttendance2.getTimelong() / 60) / 9 ) * basicsMony;
												}
											} else {
												earlyDate++;
												deductMoney = deductMoney + calculateMoney(hxhyAttendance2.getTimelong(), basicsMony);
											}
										}
									} else if("NotSigned".equals(hxhyAttendance2.getTime_result())) {
										
										notSigned++;
									} else if("Normal".equals(hxhyAttendance2.getTime_result())) {
										
										if(delayList != null && !delayList.isEmpty()) {
											for(HxhyDelayWorkScheme hxhyDelayWorkScheme : delayList) {
												if(hxhyDelayWorkScheme.getType() == 1) {
													Long destination = DateUtil.parseDate(hxhyDelayWorkScheme.getWork_date(), "HH:mm").getTime();
													Long objective = DateUtil.parseDate(DateUtil.format(hxhyAttendance2.getUser_check_time(), "HH:mm"), "HH:mm").getTime();
													if(destination >= objective) {
														delayTime = hxhyDelayWorkScheme.getDelay_time();
														break;
													} else {
														delayTime = 0;
													}
												}
											}
										}
									}
									
									//工作日加一天，并重置参数
									if(isAdd) {
										workDate++;
										isAdd = false;
									}
								}
								isEnd = true;
							}
						}
					} else {
						//不是同一天
						//判断上一天的处理是否未结束
						if(!isEnd) {
							//未结束
							//判断是否是下班卡
							if("OffDuty".equals(hxhyAttendance2.getCheck_type())) {
								//下班卡
								//判断是否是系统打卡
								if("SYSTEM".equals(hxhyAttendance2.getSource_type())) {
									//判断同一天是否有上班操作
									if(isStart) {
										//是否是系统打卡
										//判断是否是系统打卡，非系统打卡进行下面操作
										if(!isSys) {
											notSigned++;
											isPerfect = 0;
											amount++;
										}
									}
								} else {
									//判断同一天是否有上班操作
									if(!isStart) {
										//没有上班打卡则加一次缺卡记录
										notSigned++;
										isPerfect = 0;
										amount++;
									} else {
										//判断是否是系统打卡,当时系统打卡的时候进行下方操作
										if(isSys) {
											notSigned++;
											isPerfect = 0;
											amount++;
										}
									}
									
									//继续后续操作
									if("Early".equals(hxhyAttendance2.getTime_result())) {
										
										if(hxhyAttendance2.getTimelong() <= 3) {
											//
										} else {
											amount++;
											isPerfect = 0;
											if(amount > 5) {
												if(hxhyAttendance2.getTimelong() <= 60) {
													earlyDate++;
												} else if(hxhyAttendance2.getTimelong() > 60) {
													earlyDate++;
													deductMoney = deductMoney + ((hxhyAttendance2.getTimelong() / 60) / 9 ) * basicsMony;
												}
											} else {
												earlyDate++;
												deductMoney = deductMoney + calculateMoney(hxhyAttendance2.getTimelong(), basicsMony);
											}
										}
									} else if("NotSigned".equals(hxhyAttendance2.getTime_result())) {
										
										notSigned++;
									} else if("Normal".equals(hxhyAttendance2.getTime_result())) {
										
										if(delayList != null && !delayList.isEmpty()) {
											for(HxhyDelayWorkScheme hxhyDelayWorkScheme : delayList) {
												if(hxhyDelayWorkScheme.getType() == 2) {
													Long destination = DateUtil.parseDate(hxhyDelayWorkScheme.getWork_date(), "HH:mm").getTime();
													Long objective = DateUtil.parseDate(DateUtil.format(hxhyAttendance2.getUser_check_time(), "HH:mm"), "HH:mm").getTime();
													if(destination >= objective) {
														delayTime = hxhyDelayWorkScheme.getDelay_time();
														break;
													} else {
														delayTime = 0;
													}
												}
											}
										}
									}
									
									//工作日加一天，并重置参数
									if(isAdd) {
										workDate++;
										isAdd = false;
									}
								}
							} else {
								//未打卡及新的一天的情况
								//判断上一天是否有上班操作
								if(isStart) {
									//判断是否是系统打卡，下面的操作是非系统打卡
									if(!isSys) {
										//判断是否已经计算过上班天数
										if(isAdd) {
											notSigned++;
											workDate++;
											isPerfect = 0;
											amount++;
										}
									}
								}
							}
						}
						
						//全勤奖、请假、早退和迟到最总薪酬计算
						deductMoney = new BigDecimal(deductMoney).setScale(2, RoundingMode.HALF_UP).doubleValue();
						leaveMoney = basicsMony * leaveTime/9;
						leaveMoney = new BigDecimal(leaveMoney).setScale(2, RoundingMode.HALF_UP).doubleValue();
						if(isPerfect == 1) {
							workMoney = 200.0;
						}
						//参数封装
						hxhyAttendanceStatistics2.setMonthy(monthy);
						hxhyAttendanceStatistics2.setEarly_date(earlyDate);
						hxhyAttendanceStatistics2.setEarly_time(earlyTime);
						hxhyAttendanceStatistics2.setLate_date(lateDate);
						hxhyAttendanceStatistics2.setLate_time(lateTime);
						hxhyAttendanceStatistics2.setLeave_date(leaveDate);
						hxhyAttendanceStatistics2.setLeave_time(leaveTime);
						hxhyAttendanceStatistics2.setNot_signed(notSigned);
						hxhyAttendanceStatistics2.setWork_date(workDate);
						hxhyAttendanceStatistics2.setAll_date(allWorkDate);
						hxhyAttendanceStatistics2.setTheory_date(theoryDate);
						hxhyAttendanceStatistics2.setDeduct_money(deductMoney);
						hxhyAttendanceStatistics2.setLeave_money(leaveMoney);
						hxhyAttendanceStatistics2.setWork_money(workMoney);
						hxhyAttendanceStatistics2.setIs_perfect(isPerfect);
						hxhyAttendanceStatistics2.setAdd_date(new Date());
						
						//保存或更新处理
						if(statistiscList.size() > 0) {
							boolean isSave = true;
							for(HxhyAttendanceStatistics hxhyAttendanceStatistics3 : statistiscList) {
								if(hxhyAttendanceStatistics3.getUser_id().equals(hxhyAttendanceStatistics2.getUser_id())) {
									
									isSave = false;
									hxhyAttendanceStatistics2.setId(hxhyAttendanceStatistics3.getId());
									this.update(hxhyAttendanceStatistics2);
								}
							}
							
							if(isSave) {
								saveStatisticsList.add(hxhyAttendanceStatistics2);
							}
						} else {
							saveStatisticsList.add(hxhyAttendanceStatistics2);
						}
						
						//重置
						deductMoney = 0.0; leaveMoney = 0.0; workMoney = 0.0;
						isEnd = false; isSys = false; isStart = false; isAdd = true;
						earlyDate=0; earlyTime=0; notSigned=0; leaveTime=0; leaveDate=0; lateDate=0; lateTime=0; workDate=0; isPerfect=1;
						hxhyAttendanceStatistics2 = new HxhyAttendanceStatistics();
						userId = hxhyAttendance2.getUser_id();
						hxhyAttendanceStatistics2.setUser_id(userId);
						verDate = hxhyAttendance2.getWork_date();
						leaveList = hxhyLeaveRecordService.getByUserId(userId, monthy);
						int type2 = hxhyWorkSchemeService.getTypeByUserId(userId);
						if(type2 != type) {
							type = type2;
							theoryDate = getTheoryDate(type, monthy);
							allWorkDate = theoryDate + workday - holiday;
						}
						for(HxhyManager hxhyManager2 : userList) {
							if(hxhyManager2.getUser_id().equals(userId)) {
								basicsMony = (hxhyManager2.getBasics_money() + hxhyManager2.getMoney()) / theoryDate;
								basicsMony = new BigDecimal(basicsMony).setScale(4, RoundingMode.HALF_UP).doubleValue();
							}
						}
						
						//统计处理
						//请假校验
						boolean isNotLeave = true;
						if(leaveList != null && !leaveList.isEmpty()) {
							long workDateLong = DateUtil.parseDate(verDate, DateUtil.FORMAT_YYYY_MM_dd).getTime();
							for(HxhyLeaveRecord hxhyLeaveRecord : leaveList) {
								if(hxhyLeaveRecord.getStart_date().getTime() <= workDateLong
										&& hxhyLeaveRecord.getEnd_date().getTime() > workDateLong) {
									isNotLeave = false;
									leaveTime = leaveTime + hxhyLeaveRecord.getLongtime();
									leaveDate++;
								}
							}
						}
						
						//是否补卡操作
						if(hxhyAttendance2.getIs_supplement() == 1) {
							isPerfect = 0;
						}
						
						//判断当天是否有请假
						if(isNotLeave) {
							//判断是上班还是下班
							if("OnDuty".equals(hxhyAttendance2.getCheck_type())) {
								
								//日期重置
								verDate = hxhyAttendance2.getWork_date();
								//修改状态
								isStart = true;
								//判断是否是系统打卡
								if("SYSTEM".equals(hxhyAttendance2.getSource_type())) {
									isSys = true;
								} else {
									if("Late".equals(hxhyAttendance2.getTime_result()) || "SeriousLate".equals(hxhyAttendance2.getTime_result())
											|| "Absenteeism".equals(hxhyAttendance2.getTime_result())) {
										
										int longTime = hxhyAttendance2.getTimelong() - delayTime;
										if(longTime <= 3) {
											//
										} else {
											amount++;
											isPerfect = 0;
											if(amount > 5) {
												if(longTime <= 60) {
													lateDate++;
												} else if(longTime > 60) {
													lateDate++;
													deductMoney = deductMoney + ((longTime / 60) / 9 ) * basicsMony;
												}
											} else {
												lateDate++;
												deductMoney = deductMoney + calculateMoney(longTime, basicsMony);
											}
										}
									}
								}
							} else if("OffDuty".equals(hxhyAttendance2.getCheck_type())) {
								
								//判断是否是系统打卡
								if("SYSTEM".equals(hxhyAttendance2.getSource_type())) {
									//判断同一天是否有上班操作
									if(isStart) {
										//是否是系统打卡
										//判断是否是系统打卡，非系统打卡进行下面操作
										if(!isSys) {
											notSigned++;
											isPerfect = 0;
											amount++;
										}
									}
								} else {
									//判断同一天是否有上班操作
									if(!isStart) {
										//没有上班打卡则加一次缺卡记录
										notSigned++;
										isPerfect = 0;
										amount++;
									} else {
										//判断是否是系统打卡,当时系统打卡的时候进行下方操作
										if(isSys) {
											notSigned++;
											isPerfect = 0;
											amount++;
										}
									}
									
									//继续后续操作
									if("Early".equals(hxhyAttendance2.getTime_result())) {
										
										if(hxhyAttendance2.getTimelong() <= 3) {
											//
										} else {
											amount++;
											isPerfect = 0;
											if(amount > 5) {
												if(hxhyAttendance2.getTimelong() <= 60) {
													earlyDate++;
												} else if(hxhyAttendance2.getTimelong() > 60) {
													earlyDate++;
													deductMoney = deductMoney + ((hxhyAttendance2.getTimelong() / 60) / 9 ) * basicsMony;
												}
											} else {
												earlyDate++;
												deductMoney = deductMoney + calculateMoney(hxhyAttendance2.getTimelong(), basicsMony);
											}
										}
									} else if("NotSigned".equals(hxhyAttendance2.getTime_result())) {
										
										notSigned++;
									} else if("Normal".equals(hxhyAttendance2.getTime_result())) {
										
										if(delayList != null && !delayList.isEmpty()) {
											for(HxhyDelayWorkScheme hxhyDelayWorkScheme : delayList) {
												if(hxhyDelayWorkScheme.getType() == 1) {
													Long destination = DateUtil.parseDate(hxhyDelayWorkScheme.getWork_date(), "HH:mm").getTime();
													Long objective = DateUtil.parseDate(DateUtil.format(hxhyAttendance2.getUser_check_time(), "HH:mm"), "HH:mm").getTime();
													if(destination >= objective) {
														delayTime = hxhyDelayWorkScheme.getDelay_time();
														break;
													} else {
														delayTime = 0;
													}
												}
											}
										}
									}
									
									//工作日加一天，并重置参数
									if(isAdd) {
										workDate++;
										isAdd = false;
									}
								}
								isEnd = true;
							}
						}
					}
				}
				
				//是否需要保存操作
				if(saveStatisticsList.size() > 0) {
					this.insertList(saveStatisticsList);
				}
				return null;
			} else {
				return "没有考勤信息";
			}
		} catch (Exception e) {
			logger.error(e.getMessage());
			return "系统出错";
		}
	}
	
	/**
	 * 通过类型获得理论上的上班时间
	 * @param type
	 * @return
	 */
	private int getTheoryDate(int type, String monthy) {
		if(type == 1) {
			Date date = DateUtil.parseDate(monthy, DateUtil.FORMAT_YYYYMM);
			return DateUtil.getDays(date);
		}
		return 0;
	}
	
	/**
	 * 计算单次早退或退出应扣除的钱数
	 * @param timeLong
	 * @param basicsMony
	 * @return
	 */
	private double calculateMoney(int timeLong, Double basicsMony) {
		
		double res = 0;
		if(timeLong <= 3) {
			//
		} else if(timeLong <= 15) {
			res = 50;
		} else if(timeLong <= 60) {
			
			double val = 2/9 * basicsMony;
			if(val < 50) {
				res = 50;
			}
			res = val;
		} else if(timeLong <= 120) {
			double val = 4/9 * basicsMony;
			if(val < 50) {
				res = 50;
			}
			res = val;
		} else if(timeLong <= 240) {
			double val = 6/9 * basicsMony;
			if(val < 50) {
				res = 50;
			}
			res = val;
		} else if(timeLong > 240) {
			res = basicsMony;
		}
		
		return res;
	}
}
